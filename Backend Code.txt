// File: package.json
{
  "name": "project-management-backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.10.0",
    "dotenv": "^16.0.3"
  },
  "devDependencies": {
    "nodemon": "^2.0.20"
  }
}

// File: .env (create in root)
// DATABASE_URL=postgres://user:password@localhost:5432/pm_tool
// PORT=5000

// File: db.js
const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({ connectionString: process.env.DATABASE_URL });
module.exports = pool;

// File: init.sql
/*
CREATE TABLE IF NOT EXISTS tasks (
  id SERIAL PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  status VARCHAR(20) NOT NULL DEFAULT 'To Do',
  assignee VARCHAR(100),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
*/

// File: models/task.js
const pool = require('../db');

const Task = {
  async getAll() {
    const result = await pool.query('SELECT * FROM tasks ORDER BY id');
    return result.rows;
  },
  async getById(id) {
    const result = await pool.query('SELECT * FROM tasks WHERE id = $1', [id]);
    return result.rows[0];
  },
  async create({ title, description, status, assignee }) {
    const result = await pool.query(
      `INSERT INTO tasks (title, description, status, assignee) VALUES ($1, $2, $3, $4) RETURNING *`,
      [title, description, status, assignee]
    );
    return result.rows[0];
  },
  async update(id, fields) {
    const keys = Object.keys(fields);
    const values = Object.values(fields);
    const setClause = keys.map((k, i) => `${k} = $${i+1}`).join(', ');
    const result = await pool.query(
      `UPDATE tasks SET ${setClause}, updated_at = NOW() WHERE id = $${keys.length+1} RETURNING *`,
      [...values, id]
    );
    return result.rows[0];
  },
  async delete(id) {
    await pool.query('DELETE FROM tasks WHERE id = $1', [id]);
    return true;
  }
};

module.exports = Task;

// File: controllers/taskController.js
const Task = require('../models/task');

exports.getTasks = async (req, res) => {
  try {
    const tasks = await Task.getAll();
    res.json(tasks);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getTask = async (req, res) => {
  try {
    const task = await Task.getById(req.params.id);
    if (!task) return res.status(404).json({ error: 'Task not found' });
    res.json(task);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.createTask = async (req, res) => {
  try {
    const newTask = await Task.create(req.body);
    res.status(201).json(newTask);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.updateTask = async (req, res) => {
  try {
    const updated = await Task.update(req.params.id, req.body);
    res.json(updated);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

exports.deleteTask = async (req, res) => {
  try {
    await Task.delete(req.params.id);
    res.status(204).send();
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// File: routes/taskRoutes.js
const express = require('express');
const router = express.Router();
const {
  getTasks,
  getTask,
  createTask,
  updateTask,
  deleteTask
} = require('../controllers/taskController');

router.get('/tasks', getTasks);
router.get('/tasks/:id', getTask);
router.post('/tasks', createTask);
router.put('/tasks/:id', updateTask);
router.delete('/tasks/:id', deleteTask);

module.exports = router;

// File: index.js
const express = require('express');
const app = express();
const port = process.env.PORT || 5000;
require('dotenv').config();

app.use(express.json());

// Routes
const taskRoutes = require('./routes/taskRoutes');
app.use('/api', taskRoutes);

// Root endpoint
app.get('/', (req, res) => res.send('Project Management Tool API'));

app.listen(port, () => console.log(`Server running on port ${port}`));
